# my convention:
# summary: lower case no period
# description: Upper case and period.

# As part of the Web and Software Architecture exam, you will:
#
# 1. define APIs using the OpenAPI standard

openapi: 3.0.0
info:
  title: WASAPhoto
  description: >
    Keep in touch with your friends
    by sharing photos of special moments,
    thanks to WASAPhoto!
    You can upload your photos directly from your PC,
    and they will be visible to everyone following you.
  version: 0.0.1


components:

  schemas:

    UserID:
      type: number
      format: integer
      example: 1

    Username:
      type: object
      properties:
        name:
          type: string
          example: Maria
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
      
    Photo:
      type: object
      properties:
        pid:
          $ref: '#/components/schemas/PhotoID'
        uploadDateTime:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        photo:
          type: string
          format: binary
      
    PhotoID:
      type: number
      format: integer
      example: 1


  parameters:

    UserID:
      name: uid
      in: path
      required: true
      description: User ID.
      schema: { $ref: '#/components/schemas/UserID' }
    

  responses:
    
    Forbidden:
      description: >
        The user is unauthorized to act on somebody else's account.

        i.e. the ID of the user attempting the request
        is different from the one he wants to edit the
        account of.



paths:

  /users/{uid}/username:
    parameters:
      - $ref: '#/components/parameters/UserID'

    put:
      operationId: setMyUserName
      summary: set personal username
      description: >
        Set personal username with the string provided in the request body.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Username' }
        required: true
      responses:
        "200":
          # OK
          description: |
            Username successfully updated;
            it is returned in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Username' }
        "400":
          # Bad Request
          description: >
            The new username is missing from the request body or,
            the new username is not matching the required string pattern.
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
    

  /users/{uid}/photos/:
    parameters:
      - $ref: '#/components/parameters/UserID'
    
    post:
      operationId: uploadPhoto
      summary: upload a new photo on personal account
      description: >
        Upload a new photo on personal account.

        The server will create a new unique ID,
        the client can find it in the response.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      requestBody:
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/Photo' }
            encoding:
              photo:
                contentType: image/png, image/jpeg
        required: true
      responses:
        "201":
          # Created
          description: Photo successfully posted; its ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PhotoID' }
        "400":
          # Bad Request
          description: >
            The photo is missing from the request body.
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "415":
          # Unsupported Media Type
          description: >
            The photo is in a format not supported.
  

  /users/{uid}/following/{uid}:
    parameters:
      - $ref: '#/components/parameters/UserID'
    
    put:
      operationId: followUser
      summary: start following a user
      description: >
        Add an existing user to the personal 'following' list of users.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "200":
          # OK
          description: |
            User successfully added to the personal 'following' list of users;
            his/her ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserID' }
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "422":
          # Unprocessable Content
          description: >
            The request was syntactically correct 
            but was unable to be followed due to semantic errors:

            the ID of the user to be added to the 'following' list
            does not match any existing account.
    
    delete:
      operationId: unfollowUser
      summary: unfollow a user
      description: >
        Remove a user from the personal 'following' list of users.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "200":
          # OK
          description: |
            User successfully removed from the personal 'following' list of users;
            his/her ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserID' }
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "404":
          # Not Found
          description: >
            The server cannot find the requested resource.

            i.e. the ID of the user to be removed from the 'following' list
            is not present in the list.