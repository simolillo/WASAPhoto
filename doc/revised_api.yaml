openapi: 3.0.0
info:
  title: WASAPhoto
  description: >-
    Keep in touch with your friends
    by sharing photos of special moments,
    thanks to WASAPhoto!

    You can upload your photos directly from your PC,
    and they will be visible to everyone following you.
  version: 0.0.1

tags:
  - name: session
    description: All operations related to user sessions.
  - name: settings
    description: All operations related to user settings.
  - name: following
    description: All operations related to following other users.
  - name: banned
    description: All operations related to managing banned users.
  - name: photos
    description: All operations related to photos.
  - name: likes
    description: All operations related to photo likes.
  - name: comments
    description: All operations related to photo comments.
  - name: getters
    description: All operations related to retrieving user and photo information.

components:

  schemas:

    UserID:
      description: UserID.
      readOnly: true
      type: number
      format: uint64
      example: 1

    PhotoID:
      description: PhotoID.
      readOnly: true
      type: number
      format: uint64
      example: 1

    CommentID:
      description: CommentID.
      readOnly: true
      type: number
      format: uint64
      example: 1

    Username:
      description: Username.
      type: string
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16
      example: Maria

    User:
      description: User object.
      type: object
      properties:
        userID:
          $ref: '#/components/schemas/UserID'
        username:
          $ref: '#/components/schemas/Username'

    Photo:
      description: Photo object.
      type: object
      properties:
        photoID:
          $ref: '#/components/schemas/PhotoID'
        authorID:
          $ref: '#/components/schemas/UserID'
        format:
          description: Photo format.
          type: string
          enum:
            - png
            - jpg
        date:
          description: Publish date.
          type: string
          format: date-time
          minLength: 20
          maxLength: 20
          example: '2017-07-21T17:32:28Z'
          

parameters:
  # (unchanged)

responses:
  # (unchanged)

securitySchemes:
  # (unchanged)

security:
  - bearerAuth: []

paths:
  /session:
    post:
      operationId: doLogin
      tags: [session]
      security: []
      summary: logs in the user
      description: |-
        The login endpoint accepts a username like “Maria” without any password.
        If the username does not exist, it will be created, and an identifier is returned.
        If the username exists, the user identifier is returned.
      requestBody:
        description: Username.
        content:
          text/plain:
            schema: { $ref: '#/components/schemas/Username' }
        required: true
      responses:
        "200":
          # OK
          description: |-
            User log-in action successful.
            The user ID is returned in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "201":
          # Created
          description: |-
            User sign-up action successful.
            The user ID has been created and is returned in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "400":
          # Bad Request
          description: |-
            The request body is not a parseable JSON or is missing or;
            the username is not valid:
              - the client has entered white spaces only or;
              - the username is not matching the required string pattern or;
              - the username hasn't got the required length.
        "500":
          # Internal Server Error
          $ref: '#/components/responses/InternalServerError'

  /settings:
    put:
      operationId: setMyUserName
      tags: [settings]
      summary: update personal username
      description: |-
        Update personal username with the string provided in the request body.
      requestBody:
        content:
          text/plain:
            schema: { $ref: '#/components/schemas/Username' }
        required: true
      responses:
        "200":
          # OK
          description: |-
            Username successfully updated.
            The updated user is returned in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "400":
          # Bad Request
          description: |-
            The {uid} path parameter
              - is not a parseable int64 or is missing or;
              - is not matching any existing user or;
            the Authorization header ID
              - is not matching any existing user or;
            the request body is not a parseable JSON or is missing or;
            the new username is not valid:
              - the client has entered white spaces only or;
              - the username is not matching the required string pattern or;
              - the username hasn't got the required length.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "500":
          # Internal Server Error
          $ref: '#/components/responses/InternalServerError'

  /following/{uid}:
    put:
      operationId: followUser
      tags: [following]
      summary: start following a user
      description: >
        Add an existing user to the personal 'following' list of users.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "200":
          # OK
          description: |
            User successfully added to the personal 'following' list of users;
            his/her ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserID' }
        "400":
          # Bad Request
          description: >
            The ID of the user to be added to the 'following' list
            does not match any existing account.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'

    delete:
      operationId: unfollowUser
      tags: [following]
      summary: unfollow a user
      description: >
        Remove a user from the personal 'following' list of users.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "200":
          # OK
          description: |
            User successfully removed from the personal 'following' list of users;
            his/her ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserID' }
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "404":
          # Not Found
          description: >
            The server cannot find the requested resource.

            i.e. the ID of the user to be removed from the 'following' list
            is not present in the list.

  /banned/{uid}:
    put:
      operationId: banUser
      tags: [banned]
      summary: ban a user
      description: >
        Add an existing user to the personal 'banned' list of users.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "200":
          # OK
          description: |
            User successfully added to the personal 'banned' list of users;
            his/her ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserID' }
        "400":
          # Bad Request
          description: >
            The ID of the user to be added to the 'banned' list
            does not match any existing account.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'

    delete:
      operationId: unbanUser
      tags: [banned]
      summary: unban a user
      description: >
        Remove a user from the personal 'banned' list of users.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "200":
          # OK
          description: |
            User successfully removed from the personal 'banned' list of users;
            his/her ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserID' }
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "404":
          # Not Found
          description: >
            The server cannot find the requested resource.

            i.e. the ID of the user to be removed from the 'banned' list
            is not present in the list.

  /photos/:
    post:
      operationId: uploadPhoto
      tags: [photos]
      summary: upload a new photo on personal account
      description: >
        Upload a new photo on personal account.

        The server will create a new unique ID,
        the client can find it in the response.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      requestBody:
        content:
          image/jpeg:
            schema: { $ref: '#/components/schemas/RawPhoto' }
          image/png:
            schema: { $ref: '#/components/schemas/RawPhoto' }
        required: true
      responses:
        "201":
          # Created
          description: Photo successfully posted; its ID is in the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PhotoID' }
        "400":
          # Bad Request
          description: >
            The photo is missing from the request body.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "415":
          # Unsupported Media Type
          description: >
            The photo is in a format not supported.

    delete:
      operationId: deletePhoto
      tags: [photos]
      summary: delete a photo from personal account
      description: |
        Delete previously uploaded photo.
        The photo ID can be specified in the path.
        The operation is allowed if and only if it is the owner of the account to do it.
      responses:
        "204":
          # No Content
          description: |
            The request has succeeded meaning:
            the photo has been correctly deleted from the account.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "404":
          # Not Found
          description: >
            The server cannot find the requested resource.

            i.e. the ID of the specified photo does not match any
            existing photo.

  /likes/{pid}:
    put:
      operationId: likePhoto
      tags: [likes]
      summary: put a like to a photo
      description: >
        Put a like to a photo.
        The photo ID can be specified in the path.
        The user ID will be added to the 'likes' collection of that photo.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "204":
          # No Content
          description: |
            The request has succeeded meaning:
            the like has been put to the specified photo and
            the user ID has been added to the 'likes' collection of that photo.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "404":
          # Not Found
          description: >
            The server cannot find the requested resource.

            i.e. the ID of the specified photo
            does not match any existing photo.

    delete:
      operationId: unlikePhoto
      tags: [likes]
      summary: delete a like from a photo
      description: >
        Delete a like from a photo.
        The photo ID can be specified in the path.
        The user ID will be deleted from the 'likes' collection of that photo.

        The operation is allowed if and only if
        it is the owner of the account to do it.
      responses:
        "204":
          # No Content
          description: |
            The request has succeeded meaning:
            the like has been deleted from the specified photo and
            the user ID has been deleted from the 'likes' collection of that photo.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
